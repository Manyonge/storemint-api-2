datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  relationMode      = "prisma"
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  uid         Int       @id @default(autoincrement())
  email       String    @unique
  phoneNumber String?
  name        String
  hash        String?
  role        Role
  provider    Provider
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @default(now())
  retailer    Retailer?
}

enum Role {
  STORE_ADMIN
  STORE_STAFF
}

enum Provider {
  GOOGLE
  EMAIL
}

enum OrderType {
  AGENT_FULLY_PAID
  AGENT_PAY_ON_DELIVERY
  DOORSTEP_FULLY_PAID
  DOORSTEP_PAY_ON_DELIVERY
  ERRAND
}

model Retailer {
  id                Int                 @id @default(autoincrement())
  uid               Int                 @unique
  businessName      String?             @unique
  businessEmail     String              @unique
  businessLogo      String?
  passportPhoto     String?
  businessInstagram String?
  nationalId        String?
  createdAt         DateTime            @default(now())
  ewallet           Ewallet?
  userRelation      User                @relation(fields: [uid], references: [uid], onDelete: Cascade)
  Product           StoreProduct[]
  Category          Category[]
  Size              Size[]
  Condition         Condition[]
  Customer          Customer[]
  Staff             Staff[]
  Order             Order[]
  OrderStoreProduct OrderStoreProduct[]
}

model Ewallet {
  id               Int      @id @default(autoincrement())
  retailerId       Int      @unique
  balance          Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())
  retailerRelation Retailer @relation(fields: [retailerId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String
  createdAt DateTime @default(now())
}

model StoreProduct {
  id                Int                 @id @default(autoincrement())
  name              String
  description       String
  price             Int
  stock             Int
  isHidden          Boolean
  retailerId        Int
  category          String
  size              String
  condition         String
  createdAt         DateTime            @default(now())
  retailerRelation  Retailer            @relation(fields: [retailerId], references: [id], onDelete: Cascade)
  ProductImage      ProductImage[]
  orderId           Int?
  OrderStoreProduct OrderStoreProduct[]

  @@index([retailerId])
}

model Category {
  id               Int      @id @default(autoincrement())
  category         String   @unique
  retailerId       Int
  createdAt        DateTime @default(now())
  retailerRelation Retailer @relation(fields: [retailerId], references: [id])

  @@index([retailerId])
}

model Size {
  id               Int      @id @default(autoincrement())
  size             String   @unique
  retailerId       Int
  createdAt        DateTime @default(now())
  retailerRelation Retailer @relation(fields: [retailerId], references: [id])

  @@index([retailerId])
}

model Condition {
  id               Int      @id @default(autoincrement())
  condition        String   @unique
  retailerId       Int
  createdAt        DateTime @default(now())
  retailerRelation Retailer @relation(fields: [retailerId], references: [id])

  @@index([retailerId])
}

model ProductImage {
  id              Int          @id @default(autoincrement())
  publicUrl       String?      @unique
  filepath        String?      @unique
  position        Int
  productId       Int
  createdAt       DateTime     @default(now())
  productRelation StoreProduct @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Customer {
  id                Int      @id @default(autoincrement())
  name              String
  phone             String
  email             String
  instagramHandle   String?
  retailerId        Int
  createdAt         DateTime @default(now())
  retailersRelation Retailer @relation(fields: [retailerId], references: [id], onDelete: Cascade)

  @@index([retailerId])
}

model PickupmtaaniLocation {
  id                Int                 @id @default(autoincrement())
  location          String              @unique
  createdAt         DateTime            @default(now())
  PickupmtaaniAgent PickupmtaaniAgent[]
}

model PickupmtaaniAgent {
  id               Int                  @id @default(autoincrement())
  agent            String               @unique
  locationId       Int
  createdAt        DateTime             @default(now())
  locationRelation PickupmtaaniLocation @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@index([locationId])
}

model Staff {
  id                Int      @id @default(autoincrement())
  uid               Int      @unique
  name              String
  phoneNumber       String
  email             String
  retailerId        Int
  createdAt         DateTime @default(now())
  retailersRelation Retailer @relation(fields: [retailerId], references: [id], onDelete: Cascade)

  @@index([retailerId])
}

model Order {
  id                  Int                 @id @default(autoincrement())
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @default(now())
  deletedAt           DateTime?
  retailerId          Int
  type                OrderType
  deliveryFee         Int
  clientName          String
  clientPhone         String
  receiverLocation    String?
  receiverAgent       String?
  doorstepAddress     String?
  balance             Int?
  errandLocation      String?
  errandSacco         String?
  specialInstructions String?
  retailer            Retailer            @relation(fields: [retailerId], references: [id])
  products            OrderStoreProduct[]

  @@index([retailerId])
}

model OrderStoreProduct {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now())
  deletedAt  DateTime?
  orderId    Int
  productId  Int
  retailerId Int
  retailer   Retailer     @relation(fields: [retailerId], references: [id])
  product    StoreProduct @relation(fields: [productId], references: [id])
  order      Order        @relation(fields: [orderId], references: [id])

  @@index([retailerId])
  @@index([productId])
  @@index([orderId])
}
